"use strict";(self.webpackChunkwaku_guide=self.webpackChunkwaku_guide||[]).push([[1160],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,g=c["".concat(u,".").concat(k)]||c[k]||d[k]||i;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},45557:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o="Migrating to Waku v0.027",l={unversionedId:"migrations/js-waku/migration_v0.026_0.027",id:"migrations/js-waku/migration_v0.026_0.027",title:"Migrating to Waku v0.027",description:"A migration guide for refactoring your application code from Waku v0.026 to v0.027.",source:"@site/docs/migrations/js-waku/migration_v0.026_0.027.md",sourceDirName:"migrations/js-waku",slug:"/migrations/js-waku/migration_v0.026_0.027",permalink:"/migrations/js-waku/migration_v0.026_0.027",draft:!1,editUrl:"https://github.com/waku-org/docs.waku.org/tree/develop/docs/migrations/js-waku/migration_v0.026_0.027.md",tags:[],version:"current",frontMatter:{}},u={},p=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Network Configuration",id:"network-configuration",level:2},{value:"Default Network Configuration",id:"default-network-configuration",level:3},{value:"Static Sharding",id:"static-sharding",level:3},{value:"Auto Sharding",id:"auto-sharding",level:3},{value:"Pubsub Topic Configuration",id:"pubsub-topic-configuration",level:2},{value:"Removed APIs",id:"removed-apis",level:2},{value:"Type Changes",id:"type-changes",level:2},{value:"Internal/Private Utility Function Changes",id:"internalprivate-utility-function-changes",level:2}],s={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"migrating-to-waku-v0027"},"Migrating to Waku v0.027"),(0,r.kt)("p",null,"A migration guide for refactoring your application code from Waku v0.026 to v0.027."),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#migrating-to-waku-v0027"},"Migrating to Waku v0.027"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#table-of-contents"},"Table of Contents")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#network-configuration"},"Network Configuration"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#default-network-configuration"},"Default Network Configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#static-sharding"},"Static Sharding")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#auto-sharding"},"Auto Sharding")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#pubsub-topic-configuration"},"Pubsub Topic Configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#removed-apis"},"Removed APIs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#type-changes"},"Type Changes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#internalprivate-utility-function-changes"},"Internal/Private Utility Function Changes"))))),(0,r.kt)("h2",{id:"network-configuration"},"Network Configuration"),(0,r.kt)("p",null,"The way to configure network settings for a Waku node has been simplified. The new NetworkConfig type only allows for Static Sharding or Auto Sharding."),(0,r.kt)("h3",{id:"default-network-configuration"},"Default Network Configuration"),(0,r.kt)("p",null,"If no network configuration is provided when creating a Light Node, The Waku Network configuration will be used by default."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Before")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode();\n// This would use the default pubsub topic, that was, `/waku/2/default-waku/proto`\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode();\n// This will now use The Waku Network configuration by default:\n// { clusterId: 1, shards: [0,1,2,3,4,5,6,7] }\n')),(0,r.kt)("h3",{id:"static-sharding"},"Static Sharding"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Before")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  shardInfo: {\n    clusterId: 1,\n    shards: [0, 1, 2, 3]\n  }\n});\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  networkConfig: {\n    clusterId: 1,\n    shards: [0, 1, 2, 3]\n  }\n});\n')),(0,r.kt)("h3",{id:"auto-sharding"},"Auto Sharding"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Before")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  shardInfo: {\n    clusterId: 1,\n    contentTopics: ["/my-app/1/notifications/proto"]\n  }\n});\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  networkConfig: {\n    clusterId: 1,\n    contentTopics: ["/my-app/1/notifications/proto"]\n  }\n});\n')),(0,r.kt)("h2",{id:"pubsub-topic-configuration"},"Pubsub Topic Configuration"),(0,r.kt)("p",null,"Named pubsub topics are no longer supported. You must use either Static Sharding or Auto Sharding to configure pubsub topics."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Before")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  pubsubTopics: ["/waku/2/default-waku/proto"]\n});\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After")),(0,r.kt)("p",null,"Use Static Sharding:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  networkConfig: {\n    clusterId: 1,\n    shards: [0, 1, 2, 3, 4, 5, 6, 7]\n  }\n});\n')),(0,r.kt)("p",null,"Or use Auto Sharding:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  networkConfig: {\n    clusterId: 1,\n    contentTopics: ["/your-app/1/default/proto"]\n  }\n});\n')),(0,r.kt)("h2",{id:"removed-apis"},"Removed APIs"),(0,r.kt)("p",null,"The following APIs have been removed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ApplicationInfo type: Use ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," for application and version in ",(0,r.kt)("inlineCode",{parentName:"li"},"NetworkConfig")," instead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shardInfo")," option in ",(0,r.kt)("inlineCode",{parentName:"li"},"createLightNode"),": Use ",(0,r.kt)("inlineCode",{parentName:"li"},"networkConfig")," instead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pubsubTopics")," option in ",(0,r.kt)("inlineCode",{parentName:"li"},"createLightNode"),": Use ",(0,r.kt)("inlineCode",{parentName:"li"},"networkConfig")," with Static Sharding or Auto Sharding instead.")),(0,r.kt)("p",null,"If you were using ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplicationInfo")," before, you should now use ",(0,r.kt)("inlineCode",{parentName:"p"},"ContentTopicInfo")," (Auto Sharding) and specify your application and version in the content topic ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Before")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  shardInfo: {\n    clusterId: 1,\n    application: "my-app",\n    version: "1"\n  }\n});\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createLightNode } from "@waku/sdk";\n\nconst waku = await createLightNode({\n  networkConfig: {\n    clusterId: 1,\n    contentTopics: ["/my-app/1/default/proto"]\n  }\n});\n')),(0,r.kt)("h2",{id:"type-changes"},"Type Changes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ShardingParams")," has been removed. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"NetworkConfig")," instead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NetworkConfig")," is now defined as ",(0,r.kt)("inlineCode",{parentName:"li"},"StaticSharding")," | ",(0,r.kt)("inlineCode",{parentName:"li"},"AutoSharding"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StaticSharding")," is equivalent to the previous ",(0,r.kt)("inlineCode",{parentName:"li"},"ShardInfo"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AutoSharding")," is equivalent to the previous ",(0,r.kt)("inlineCode",{parentName:"li"},"ContentTopicInfo"),".")),(0,r.kt)("h2",{id:"internalprivate-utility-function-changes"},"Internal/Private Utility Function Changes"),(0,r.kt)("p",null,"Several utility functions have been updated or added:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ensureShardingConfigured")," has been removed. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"derivePubsubTopicsFromNetworkConfig")," instead."),(0,r.kt)("li",{parentName:"ul"},"New function ",(0,r.kt)("inlineCode",{parentName:"li"},"derivePubsubTopicsFromNetworkConfig")," has been added to derive pubsub topics from the network configuration."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shardInfoToPubsubTopics")," now accepts ",(0,r.kt)("inlineCode",{parentName:"li"},"Partial<NetworkConfig>")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"Partial<ShardingParams>"),"."),(0,r.kt)("li",{parentName:"ul"},"New function ",(0,r.kt)("inlineCode",{parentName:"li"},"pubsubTopicsToShardInfo")," has been added to convert pubsub topics to a ShardInfo object.")),(0,r.kt)("p",null,"If you were using any of these utility functions directly, you'll need to update your code accordingly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Before")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ensureShardingConfigured } from "@waku/utils";\n\nconst result = ensureShardingConfigured(shardInfo);\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { derivePubsubTopicsFromNetworkConfig } from "@waku/utils";\n\nconst pubsubTopics = derivePubsubTopicsFromNetworkConfig(networkConfig);\n')),(0,r.kt)("p",null,"Note: The default ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkConfig")," for The Waku Network is now ",(0,r.kt)("inlineCode",{parentName:"p"},"{ clusterId: 1, shards: [0,1,2,3,4,5,6,7] }.")))}d.isMDXComponent=!0}}]);