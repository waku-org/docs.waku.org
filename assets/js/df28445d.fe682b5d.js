"use strict";(self.webpackChunkwaku_guide=self.webpackChunkwaku_guide||[]).push([[2355],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,y=m["".concat(c,".").concat(u)]||m[u]||d[u]||s;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const s={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.default)(s.tabItem,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(87462),r=n(67294),s=n(86010),i=n(12466),o=n(70989),c=n(72389);const l={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){let{className:t,block:n,selectedValue:o,selectValue:c,tabValues:p}=e;const m=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),u=e=>{const t=e.currentTarget,n=m.indexOf(t),a=p[n].value;a!==o&&(d(t),c(a))},y=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=m.indexOf(e.currentTarget)+1;t=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(e.currentTarget)-1;t=m[n]??m[m.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.default)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:y,onClick:u},i,{className:(0,s.default)("tabs__item",l.tabItem,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function m(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function d(e){const t=(0,o.Y)(e);return r.createElement("div",{className:(0,s.default)("tabs-container",l.tabList)},r.createElement(p,(0,a.Z)({},e,t)),r.createElement(m,(0,a.Z)({},e,t)))}function u(e){const t=(0,c.default)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},30282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>y,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),s=n(65488),i=n(85162);const o={title:"Encrypt, Decrypt, and Sign Your Messages",hide_table_of_contents:!0},c=void 0,l={unversionedId:"guides/js-waku/message-encryption",id:"guides/js-waku/message-encryption",title:"Encrypt, Decrypt, and Sign Your Messages",description:"This guide provides detailed steps to use the @waku/message-encryption package to encrypt, decrypt, and sign your messages using Waku message payload encryption methods.",source:"@site/docs/guides/js-waku/message-encryption.md",sourceDirName:"guides/js-waku",slug:"/guides/js-waku/message-encryption",permalink:"/guides/js-waku/message-encryption",draft:!1,editUrl:"https://github.com/waku-org/docs.waku.org/tree/develop/docs/guides/js-waku/message-encryption.md",tags:[],version:"current",lastUpdatedAt:1709870781,formattedLastUpdatedAt:"8 Mar 2024",frontMatter:{title:"Encrypt, Decrypt, and Sign Your Messages",hide_table_of_contents:!0},sidebar:"guides",previous:{title:"Retrieve Messages Using Store Protocol",permalink:"/guides/js-waku/store-retrieve-messages"},next:{title:"Build React DApps Using @waku/react",permalink:"/guides/js-waku/use-waku-react"}},p={},m=[{value:"Installation",id:"installation",level:2},{value:"Symmetric encryption",id:"symmetric-encryption",level:2},{value:"ECIES encryption",id:"ecies-encryption",level:2},{value:"Signing encrypted messages",id:"signing-encrypted-messages",level:2},{value:"Storing encryption keys",id:"storing-encryption-keys",level:2}],d={toc:m},u="wrapper";function y(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide provides detailed steps to use the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@waku/message-encryption"},"@waku/message-encryption")," package to encrypt, decrypt, and sign your messages using ",(0,r.kt)("a",{parentName:"p",href:"/learn/glossary#waku-message-payload-encryption"},"Waku message payload encryption")," methods."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Waku uses libp2p noise encryption for node-to-node connections. However, no default encryption method is applied to the data sent over the network. This design choice enhances Waku's encryption flexibility, encouraging developers to freely use custom protocols or ",(0,r.kt)("a",{parentName:"p",href:"/learn/glossary#waku-message-payload-encryption"},"Waku message payload encryption")," methods.")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install the required packages for integrating ",(0,r.kt)("inlineCode",{parentName:"p"},"@waku/message-encryption")," using your preferred package manager:"),(0,r.kt)(s.Z,{groupId:"package-manager",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",label:"NPM",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @waku/message-encryption @waku/utils\n"))),(0,r.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @waku/message-encryption @waku/utils\n")))),(0,r.kt)("h2",{id:"symmetric-encryption"},"Symmetric encryption"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Symmetric")," encryption uses a single, shared key for message encryption and decryption. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"generateSymmetricKey()")," function to generate a random symmetric key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { generateSymmetricKey } from "@waku/message-encryption";\n\n// Generate a random symmetric key\nconst symmetricKey = generateSymmetricKey();\n')),(0,r.kt)("p",null,"To send encrypted messages, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Symmetric")," message ",(0,r.kt)("inlineCode",{parentName:"p"},"encoder")," and send the message as usual:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sender client"',title:'"Sender','client"':!0},'import { createEncoder } from "@waku/message-encryption/symmetric";\n\n// Create a symmetric message encoder\nconst encoder = createEncoder({\n    contentTopic: contentTopic, // message content topic\n    symKey: symmetricKey, // symmetric key for encrypting messages\n});\n\n// Send the message using Light Push\nawait node.lightPush.send(encoder, { payload });\n')),(0,r.kt)("p",null,"To decrypt the messages you receive, create a symmetric message ",(0,r.kt)("inlineCode",{parentName:"p"},"decoder")," and process the messages as usual:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Receiver client"',title:'"Receiver','client"':!0},'import { createDecoder } from "@waku/message-encryption/symmetric";\n\n// Create a symmetric message decoder\nconst decoder = createDecoder(contentTopic, symmetricKey);\n\n// Receive messages from a Filter subscription\nawait subscription.subscribe([decoder], callback);\n\n// Retrieve messages from Store peers\nawait node.store.queryWithOrderedCallback([decoder], callback);\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The symmetric key exchange between users can happen through an ",(0,r.kt)("a",{parentName:"p",href:"/learn/glossary#out-of-band"},"out-of-band method"),". For example, where the key is embedded within the URL shared by a user to access a specific resource.")),(0,r.kt)("h2",{id:"ecies-encryption"},"ECIES encryption"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ECIES")," encryption uses a public key for encryption and a private key for decryption. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"generatePrivateKey()")," function to generate a random ",(0,r.kt)("inlineCode",{parentName:"p"},"ECDSA")," private key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { generatePrivateKey, getPublicKey } from "@waku/message-encryption";\n\n// Generate a random ECDSA private key, keep secure\nconst privateKey = generatePrivateKey();\n\n// Generate a public key from the private key, provide to the sender\nconst publicKey = getPublicKey(privateKey);\n')),(0,r.kt)("p",null,"To send encrypted messages, create an ",(0,r.kt)("inlineCode",{parentName:"p"},"ECIES")," message ",(0,r.kt)("inlineCode",{parentName:"p"},"encoder")," with the public key and send the message as usual:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sender client"',title:'"Sender','client"':!0},'import { createEncoder } from "@waku/message-encryption/ecies";\n\n// Create an ECIES message encoder\nconst encoder = createEncoder({\n    contentTopic: contentTopic, // message content topic\n    publicKey: publicKey, // ECIES public key for encrypting messages\n});\n\n// Send the message using Light Push\nawait node.lightPush.send(encoder, { payload });\n')),(0,r.kt)("p",null,"To decrypt the messages you receive, create an ",(0,r.kt)("inlineCode",{parentName:"p"},"ECIES")," message ",(0,r.kt)("inlineCode",{parentName:"p"},"decoder")," with the private key and process the messages as usual:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Receiver client"',title:'"Receiver','client"':!0},'import { createDecoder } from "@waku/message-encryption/ecies";\n\n// Create an ECIES message decoder\nconst decoder = createDecoder(contentTopic, privateKey);\n\n// Receive messages from a Filter subscription\nawait subscription.subscribe([decoder], callback);\n\n// Retrieve messages from Store peers\nawait node.store.queryWithOrderedCallback([decoder], callback);\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Users can share their public key through broadcasting or ",(0,r.kt)("a",{parentName:"p",href:"/learn/glossary#out-of-band"},"out-of-band methods"),", such as embedding it in a URL or sending an unencrypted message on another content topic for others to retrieve.")),(0,r.kt)("h2",{id:"signing-encrypted-messages"},"Signing encrypted messages"),(0,r.kt)("p",null,"Message signing helps in proving the authenticity of received messages. By attaching a signature to a message, you can verify its origin and integrity with absolute certainty."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Signing messages is only possible when encrypted, but if your application does not require encryption, you can generate a symmetric key through hardcoded or deterministic methods using information available to all users.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sigPrivKey")," parameter allows the ",(0,r.kt)("inlineCode",{parentName:"p"},"Symmetric")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ECIES")," message ",(0,r.kt)("inlineCode",{parentName:"p"},"encoders")," to sign the message before encryption using an ",(0,r.kt)("inlineCode",{parentName:"p"},"ECDSA")," private key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Alice (sender) client"',title:'"Alice',"(sender)":!0,'client"':!0},'import { generatePrivateKey, getPublicKey } from "@waku/message-encryption";\nimport { createEncoder as createSymmetricEncoder } from "@waku/message-encryption/symmetric";\nimport { createEncoder as createECIESEncoder } from "@waku/message-encryption/ecies";\n\n// Generate a random ECDSA private key for signing messages\n// ECIES encryption and message signing both use ECDSA keys\n// For this example, we\'ll call the sender of the message Alice\nconst alicePrivateKey = generatePrivateKey();\nconst alicePublicKey = getPublicKey(alicePrivateKey);\n\n// Create a symmetric encoder that signs messages\nconst symmetricEncoder = createSymmetricEncoder({\n    contentTopic: contentTopic, // message content topic\n    symKey: symmetricKey, // symmetric key for encrypting messages\n    sigPrivKey: alicePrivateKey, // private key for signing messages before encryption\n});\n\n// Create an ECIES encoder that signs messages\nconst ECIESEncoder = createECIESEncoder({\n    contentTopic: contentTopic, // message content topic\n    publicKey: publicKey, // ECIES public key for encrypting messages\n    sigPrivKey: alicePrivateKey, // private key for signing messages before encryption\n});\n\n// Send and receive your messages as usual with Light Push and Filter\nawait subscription.subscribe([symmetricEncoder], callback);\nawait node.lightPush.send(symmetricEncoder, { payload });\n\nawait subscription.subscribe([ECIESEncoder], callback);\nawait node.lightPush.send(ECIESEncoder, { payload });\n')),(0,r.kt)("p",null,"You can extract the ",(0,r.kt)("inlineCode",{parentName:"p"},"signature")," and its public key (",(0,r.kt)("inlineCode",{parentName:"p"},"signaturePublicKey"),") from the ",(0,r.kt)("a",{parentName:"p",href:"https://js.waku.org/classes/_waku_message_encryption.DecodedMessage.html"},"DecodedMessage")," and compare it with the expected public key or use the ",(0,r.kt)("inlineCode",{parentName:"p"},"verifySignature()")," function to verify the message origin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Bob (receiver) client"',title:'"Bob',"(receiver)":!0,'client"':!0},'import { generatePrivateKey } from "@waku/message-encryption";\nimport { createEncoder } from "@waku/message-encryption/symmetric";\n\n// Generate a random private key for signing messages\n// For this example, we\'ll call the receiver of the message Bob\nconst bobPrivateKey = generatePrivateKey();\n\n// Create an encoder that signs messages\nconst encoder = createEncoder({\n    contentTopic: contentTopic,\n    symKey: symmetricKey,\n    sigPrivKey: bobPrivateKey,\n});\n\n// Modify the callback function to verify message signature\nconst callback = (wakuMessage) => {\n    // Extract the message signature and public key of the signature\n    // You can compare the signaturePublicKey with Alice public key\n    const signature = wakuMessage.signature;\n    const signaturePublicKey = wakuMessage.signaturePublicKey;\n\n    // Verify the message was actually signed and sent by Alice\n    // Alice\'s public key can be gotten from broadcasting or out-of-band methods\n    if (wakuMessage.verifySignature(alicePublicKey)) {\n        console.log("This message was signed by Alice");\n    } else {\n        console.log("This message was NOT signed by Alice");\n    }\n};\n\nawait subscription.subscribe([encoder], callback);\n')),(0,r.kt)("h2",{id:"storing-encryption-keys"},"Storing encryption keys"),(0,r.kt)("p",null,"We used randomly generated keys for encryption and message signing in the provided examples, but real-world applications require consistent keys among client restarts. Have a look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/waku-org/js-waku-examples/tree/master/examples/eth-pm/src/key_pair_handling"},"Key Pair Handling")," example, which demonstrates the secure storage and retrieval of key information from local storage using ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto"},"Subtle Crypto"),"."),(0,r.kt)("p",null,"If you need a simple way to store your keys in hexadecimal format across your application, you can use the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@waku/utils"},"@waku/utils")," package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { bytesToHex, hexToBytes } from "@waku/utils/bytes";\n\n// Generate random symmetric and private keys\nconst symmetricKey = generateSymmetricKey();\nconst privateKey = generatePrivateKey();\n\n// Store the keys in hexadecimal format\nconst symmetricKeyHex = bytesToHex(symmetricKey);\nconst privateKeyHex = bytesToHex(privateKey);\n\n// Restore the keys from hexadecimal format\nconst restoredSymmetricKey = hexToBytes(symmetricKeyHex);\nconst restoredPrivateKey = hexToBytes(privateKeyHex);\n')),(0,r.kt)("admonition",{title:"Congratulations!",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You have successfully encrypted, decrypted, and signed your messages using ",(0,r.kt)("inlineCode",{parentName:"p"},"Symmetric")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ECIES")," encryption methods. Have a look at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/waku-org/js-waku-examples/tree/master/examples/eth-pm"},"eth-pm")," example for a working demo.")))}y.isMDXComponent=!0}}]);